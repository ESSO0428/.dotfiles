#!/usr/bin/env bash

# 選擇一個起始端口
port=5000
# 設定固定時間傳值
ssh_options="-o ServerAliveInterval=60 -o ServerAliveCountMax=3"


trap cleanup INT

# 检查是否安装了ncat
if ! command -v ncat &> /dev/null; then
  echo "ncat is not installed. Please install ncat to continue."
  echo "You can install ncat using the following commands (specific commands may vary based on your system):"
  echo "On Debian/Ubuntu:"
  echo "sudo apt-get install ncat"
  echo "On CentOS/RHEL:"
  echo "sudo yum install ncat"
  echo "On macOS (with Homebrew):"
  echo "brew install nmap"
  echo "on Arch Linux:"
  echo "sudo pacman -Syu netcat"
  exit 1
fi

exclude_ports=()

# 避免使用到 container 的 port (但是 stop 的還是會用到)
# 因此後續要重取 container 時，可能要再重啟這支 reverse-ssh-tunnel-manager 來更換其他 port
function exclude_docker_port() {
  # 嘗試填充一個包含 Docker 容器使用的端口的數組
  local ports_for_docker=()
  if command -v docker > /dev/null 2>&1; then
      ports_for_docker=($(docker ps -a --no-trunc | awk '{print $1, $N}' | grep -Eo '[0-9]+:[0-9]+->' | cut -d'-' -f1 | cut -d':' -f2))
  fi
  echo "${ports_for_docker[@]}"
}

exclude_ports+=($(exclude_docker_port))

function cleanup() {
  echo "Cleaning up..."
  pkill "ncat"
  pkill -f "ssh $ssh_options -fNR"

  # 清除所有已处理的 server_ip 相关的 .rssh_tunnel 文件
  for ip in "${!processed_ips[@]}"; do
    ssh -f "${ip}" "echo -n > ~/.rssh_tunnel" >/dev/null 2>&1
    if [ $? -eq 0 ]; then
      echo "Cleared ~/.rssh_tunnel for ${ip}"
    else
      echo "Failed to clear ~/.rssh_tunnel for ${ip}"
    fi
  done

  exit 0
}

# 檢查是否提供了'--close'參數
if [[ "$1" == "--close" ]]; then
  cleanup  # 執行 cleanup 函數來關閉所有進程
  exit 0
fi


# 殺死所有當前運行的ncat和ssh -fNR進程
pkill "ncat"
pkill -f "ssh $ssh_options -fNR"

# 檢查當前正在運行的SSH連接
ssh_connections=$(ps aux | grep "ssh -Y" | grep -v grep)

# 使用關聯陣列來追踪已經處理過的伺服器IP
declare -A processed_ips

# 定義一個函數來尋找可用端口
find_available_ports() {
  local start_port=5000
  local end_port=9999
  local port=$start_port

  while [[ $port -le $end_port ]]; do
    # 1. 檢查本地主機上的端口是否可用
    if ! [[ $(netstat -tl | grep ":$port") ]] && ! [[ " ${exclude_ports[@]} " =~ " $port " ]]; then
      # 2. 檢查遠端主機上的端口是否可用
      remote_address_port_available_ck_command="ssh $ssh_command_args netstat -tuln | grep ':${port} '"
      if ! eval $remote_address_port_available_ck_command >/dev/null 2>&1; then
        # 加入可用端口列表
        available_ports+=($port)
        # 加入排除列表，避免重複使用
        exclude_ports+=($port)
        # 找到可用端口后立即退出函数
        return
      fi
    fi
    ((port++))
  done
}

# 將 ssh_connections 寫入到文件描述符 3
exec 3<<< "$ssh_connections"

# 為每個SSH連接建立反向隧道和ncat監聽
while read -r line <&3; do
  ssh_command_args=$(echo "$line" | awk '{for (i=12; i<=NF; i++) printf $i " "; print ""}')
  ssh_command_args=$(echo "$ssh_command_args" | sed -E 's/-Y -C//' | sed -E 's/-Y//' | sed -E 's/-C//' | sed -E 's/-YC//' | sed -E 's/-CY//')
  # 從SSH命令中提取server_ip
  port_arg=""
  if echo "$line" | grep -q " -J "; then
    server_ip=$(echo "$line" | awk -F'-J ' '{print $2}' | awk -F'-' '{print $1}')
    server_ip=$(printf -- "-J %s" "$server_ip")
  else
    server_ip=$line
    if echo "$line" | grep -q " -p "; then
      port_arg=$(echo $line | awk -F'-p ' '{print $2}')
      port_arg=$(printf -- "-p %s" "$port_arg")
      sed_command=$(printf "s/%s//" "$port_arg")
      server_ip=$(echo "$server_ip" | sed -E "$sed_command")
    fi
    server_ip=$(echo $server_ip | awk '{print $NF}')
  fi

  # 檢查此IP是否已經被處理過
  if [[ -z "${processed_ips[$server_ip]}" ]]; then
    # 每次处理新的 processed_ips 都重新查找可用端口
    available_ports=()
    find_available_ports

    # 从可用端口列表中取出下一个可用端口
    if [[ ${#available_ports[@]} -eq 0 ]]; then
      echo "No available ports remaining. Exiting."
      cleanup
    fi
    port_to_use=${available_ports[0]}
    available_ports=("${available_ports[@]:1}")

    # 打印並執行命令
    ssh_cmd="ssh $ssh_options -fNR $port_to_use:localhost:$port_to_use $server_ip $port_arg"
    echo "Running: $ssh_cmd"
    $ssh_cmd >/dev/null 2>&1 || continue

    ncat_cmd="ncat -l --keep-open $port_to_use -e /bin/sh"
    echo "Running: $ncat_cmd"
    $ncat_cmd &

    # 將端口號寫入到遠端的~/.rssh_tunnel文件中
    ssh -f $server_ip $port_arg "echo $port_to_use > ~/.rssh_tunnel" >/dev/null 2>&1

    # 标记服务器IP为已处理
    processed_ips[$server_ip]=1
  fi
done

# 檢查是否提供了'--slient'參數
if [[ "$1" != "--silent" ]]; then
  echo '-----------------------------------------------------'
  echo "Press Ctrl+C to close \"ssh -fNR\" and \"ncat\" process ..."

  # 保持腳本運行，直到用戶按下Ctrl+C
  while true; do
    sleep 1
  done
fi
